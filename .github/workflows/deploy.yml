name: Build Spring Boot Docker Image and Push to ECR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: springboot-gallery-app
  IMAGE_NAME: springboot-app
  INFRA_S3_BUCKET: ${{ secrets.INFRA_S3_BUCKET }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate image tag
        id: image-tag
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          LATEST_IMAGE_NAME="${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "LATEST_IMAGE_NAME=${LATEST_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.image-tag.outputs.FULL_IMAGE_NAME }} .
          docker tag ${{ steps.image-tag.outputs.FULL_IMAGE_NAME }} ${{ steps.image-tag.outputs.LATEST_IMAGE_NAME }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.image-tag.outputs.FULL_IMAGE_NAME }}
          docker push ${{ steps.image-tag.outputs.LATEST_IMAGE_NAME }}

      - name: Replace image URI in imagedefinitions.json
        run: |
          echo '[{"name":"springboot-container","imageUri":"${{ steps.image-tag.outputs.FULL_IMAGE_NAME }}"}]' > imagedefinitions.json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Register new ECS task definition
        run: |
          sed "s|<IMAGE_URI>|${{ secrets.ECR_URI }}:${{ steps.image-tag.outputs.IMAGE_TAG }}|g" taskdef.json > taskdef-rendered.json
            aws ecs register-task-definition --cli-input-json file://taskdef-rendered.json > taskdef-out.json
            TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' taskdef-out.json)
            sed "s|<TASK_DEFINITION_ARN>|$TASK_DEF_ARN|g" appspec.json > appspec-rendered.json

      - name: Package and upload pipeline artifacts
        run: |
          zip pipeline-configs.zip appspec-rendered.json imagedefinitions.json
          aws s3 cp pipeline-configs.zip s3://${{ env.INFRA_S3_BUCKET }}/pipeline-configs.zip

      - name: Create deployment manifest
        run: |
          cat > deployment-manifest.json << EOF
          {
            "image_name": "${{ env.ECR_REPOSITORY }}",
            "image_tag": "${{ steps.image-tag.outputs.IMAGE_TAG }}",
            "full_image_name": "${{ steps.image-tag.outputs.FULL_IMAGE_NAME }}",
            "latest_image_name": "${{ steps.image-tag.outputs.LATEST_IMAGE_NAME }}",
            "ecr_registry": "${{ steps.image-tag.outputs.ECR_REGISTRY }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}"
          }
          EOF

      - name: Output summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Name:** ${{ steps.image-tag.outputs.FULL_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag:** ${{ steps.image-tag.outputs.LATEST_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Registry:** ${{ steps.image-tag.outputs.ECR_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          
          echo "## Docker Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.image-tag.outputs.FULL_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.image-tag.outputs.LATEST_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY